#!/usr/bin/env bash
# -*- shell-script -*-

# shellcheck source=lib/utils.sh
source "$(dirname "$(dirname "$(dirname "$0")")")/lib/utils.sh"

asdf_current_command() {
  local plugin_name="${1-}"

  if [ -z "$plugin_name" ]; then
    (asdf_current_tools || true) |\
      asdf_current_check_installed |\
      asdf_pipe_empty asdf_current_error_no_tools
    return $?
  fi

  asdf_assert_plugin_exists "$plugin_name" || {
    return $?
  }

  {
    (asdf_current_tools || true) # dont fail if no selected from .tool-versions
    asdf_plugin_legacy_versions "$plugin_name"
  } | (grep -e "^${plugin_name} " || true) |\
    asdf_pipe_empty asdf_current_error_no_version "$plugin_name" |\
    asdf_current_check_installed |\
    cut -d $' ' -f 2- # only print versions and comments
}

asdf_current_check_installed() {
  while IFS=$'\n' read -d '' -r line || [ -n "$line" ]; do
    IFS=$' ' read -r plugin_name full_version rest <<<"$(echo "$line")"
    IFS=$'\n' read -d $'' -r install_type version install_path <<<"$(asdf_full_version_info "$plugin_name" "$full_version")" && [ -n "${version}" ] 
    if [ "system" != "$install_type" ] && [ ! -d "$install_path" ] ; then
      asdf_echo_error "${plugin_name} ${full_version} # NOT INSTALLED ${rest}"
      return 1
    else
      echo "$line"
    fi
  done
}

asdf_current_error_no_tools() {
  asdf_echo_error "No tool versions set."
  return 1
}

asdf_current_error_no_version() {
  asdf_echo_error "No version set for ${1}."
  return 126
}



asdf_current_command "$@"
